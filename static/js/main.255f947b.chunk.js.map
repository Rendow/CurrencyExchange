{"version":3,"sources":["redux/actions.ts","components/InputComponent.tsx","components/CurrencyExchange.tsx","container/CurrencyEContainer.tsx","App.tsx","redux/currencyReducer.ts","redux/state.ts","index.tsx"],"names":["ACTIONS_TYPE","InputComponent","props","style","marginTop","type","className","value","data-currency","dataCurrency","onChange","CurrencyExchange","currenciesName","currentCurrency","currencyRate","isBuying","amountOfUSD","amountOfCurrency","changeCurrencyField","changeAction","changeCurrentCurrency","viewCurrency","marginBottom","map","currency","index","onClick","opacity","data-action","changeCurrencyFieldAC","amountOfBYN","CHANGE_CURRENCY_FIELD","payload","changeActionAC","CHANGE_CHANGE_ACTION","CurrencyEContainer","useSelector","state","currencies","dispatch","useDispatch","currencyName","buyRate","sellRate","e","currentTarget","isFinite","dataset","trigger","Number","toFixed","action","CHANGE_CURRENT_CURRENCY","changeCurrentCurrencyAC","App","initialState","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.255f947b.chunk.js","sourcesContent":["export enum ACTIONS_TYPE {\r\n    CHANGE_CURRENCY_FIELD = 'CurrencyExchange/CHANGE_CURRENCY_FIELD',\r\n    CHANGE_CHANGE_ACTION = 'CurrencyExchange/CHANGE_CHANGE_ACTION',\r\n    CHANGE_CURRENT_CURRENCY = 'CurrencyExchange/CHANGE_CURRENT_CURRENCY',\r\n}\r\n\r\n\r\nexport type ChangeCurrencyFieldType = {\r\n    type:ACTIONS_TYPE.CHANGE_CURRENCY_FIELD\r\n    payload:{\r\n        amountOfUSD: string,\r\n        amountOfCurrency: string\r\n    }\r\n};\r\n\r\nexport const changeCurrencyFieldAC = (amountOfBYN: string, amountOfCurrency: string): ChangeCurrencyFieldType => {\r\n    return {\r\n        type:ACTIONS_TYPE.CHANGE_CURRENCY_FIELD,\r\n        payload:{amountOfUSD: amountOfBYN, amountOfCurrency},\r\n    }\r\n};\r\n\r\nexport type ChangeAction = {\r\n    type:ACTIONS_TYPE.CHANGE_CHANGE_ACTION\r\n    payload:{isBuying: boolean}\r\n};\r\n\r\nexport const changeActionAC = (isBuying: boolean): ChangeAction => {\r\n    return {\r\n        type:ACTIONS_TYPE.CHANGE_CHANGE_ACTION,\r\n        payload: {isBuying},\r\n    }\r\n};\r\n\r\nexport type ChangeCurrentCurrencyType = {\r\n    type:ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY\r\n    payload:{currentCurrency: string}\r\n};\r\n\r\nexport const changeCurrentCurrencyAC = (currentCurrency: string): ChangeCurrentCurrencyType => {\r\n    return {\r\n        type:ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\r\n        payload: {currentCurrency},\r\n    }\r\n};\r\n\r\nexport type CurrencyReducersTypes = ChangeCurrencyFieldType | ChangeAction | ChangeCurrentCurrencyType;","import React from \"react\";\r\n\r\ntype InputType = {\r\n    value: string;\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    dataCurrency: string;\r\n}\r\n\r\nexport const InputComponent = (props:InputType) => {\r\n    return <>\r\n        <input style={{marginTop:'7px'}} type=\"text\"\r\n               className=\"form-control + ' ' + input-group mb-3\"\r\n               value={props.value}\r\n               data-currency={props.dataCurrency}\r\n               onChange={props.onChange}/>\r\n    </>\r\n\r\n}","import React from 'react';\r\nimport {InputComponent} from \"./InputComponent\";\r\n\r\ntype CurrencyExchangePropsType = {\r\n    currenciesName: string[];\r\n    currentCurrency: string;\r\n    currencyRate: number;\r\n    isBuying: boolean;\r\n    amountOfUSD: string;\r\n    amountOfCurrency: string;\r\n    changeCurrencyField: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    changeAction: (e: React.MouseEvent<HTMLSpanElement>) => void;\r\n    changeCurrentCurrency: (e: React.MouseEvent<HTMLLIElement>) => void;\r\n};\r\n\r\nconst CurrencyExchange: React.FC<CurrencyExchangePropsType> = props => {\r\n    const {\r\n        currenciesName,\r\n        currentCurrency,\r\n        currencyRate,\r\n        isBuying,\r\n        amountOfUSD,\r\n        amountOfCurrency,\r\n        changeCurrencyField,\r\n        changeAction,\r\n        changeCurrentCurrency,\r\n    } = props;\r\n\r\n    const viewCurrency = isBuying ? (\r\n        <>\r\n            <label>\r\n                You give the next amount of USD:\r\n                <InputComponent dataCurrency={\"usd\"}\r\n                                value={amountOfUSD}\r\n                                onChange={changeCurrencyField}/>\r\n            </label>\r\n            <label>\r\n                You get the next amount of {currentCurrency}:\r\n                <InputComponent dataCurrency={\"currency\"}\r\n                                value={amountOfCurrency}\r\n                                onChange={changeCurrencyField}/>\r\n            </label>\r\n        </>\r\n    ) : (\r\n        <>\r\n                <label> You give the next amount of {currentCurrency}:\r\n                    <InputComponent dataCurrency={\"currency\"}\r\n                                    value={amountOfCurrency}\r\n                                    onChange={changeCurrencyField}/>\r\n                </label>\r\n\r\n            <label> You get the next amount of USD:\r\n                <InputComponent dataCurrency={\"usd\"}\r\n                                value={amountOfUSD}\r\n                                onChange={changeCurrencyField}/>\r\n            </label>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <div className=\"currency\">\r\n            <h2 style={{marginBottom:'25x'}}>Currency exchange</h2>\r\n            <div className=\"currency-names\">\r\n                <p>Current currency:</p>\r\n                <ul>\r\n                    {currenciesName.map((currency: string, index: number) => {\r\n                        return (\r\n                            <li\r\n                                key={`${index}-${currency}`}\r\n                                className={`currencies ${currentCurrency === currency ? 'activeCurrency' : null}`}\r\n                                onClick={changeCurrentCurrency}\r\n                                data-currency={currency}\r\n                            >\r\n                                {currency}\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </div>\r\n            <div className=\"currency-action\">\r\n        <span style={{opacity:'0.8'}} className={\"btn btn-outline-success\"} data-action=\"buy\" onClick={changeAction}>\r\n          Buy\r\n        </span>\r\n                <span style={{opacity:'0.8'}} className={'btn btn-outline-danger'} data-action=\"sell\" onClick={changeAction}>\r\n          Sell\r\n        </span>\r\n            </div>\r\n            <div className=\"fields\">\r\n                <p>Currency rate: <p> {currencyRate} </p> </p>\r\n                  {viewCurrency}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrencyExchange;\r\n","import CurrencyExchange from '../components/CurrencyExchange';\r\nimport {CurrencyType} from '../redux/currencyReducer';\r\nimport {changeActionAC, changeCurrencyFieldAC, changeCurrentCurrencyAC, CurrencyReducersTypes} from '../redux/actions';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {GlobalStateType} from \"../redux/state\";\r\nimport React, {Dispatch} from \"react\";\r\n\r\nconst CurrencyEContainer: React.FC = () => {\r\n\r\n    const {  currencies,\r\n        currentCurrency,\r\n        isBuying,\r\n        amountOfUSD,\r\n        amountOfCurrency\r\n    } = useSelector((state:GlobalStateType) => state.currency)\r\n\r\n    const dispatch = useDispatch<Dispatch<CurrencyReducersTypes>>()\r\n\r\n    let currencyRate: number = 0;\r\n    const currenciesName = currencies.map((currency: CurrencyType) => {\r\n        if (currency.currencyName === currentCurrency) {\r\n            currencyRate = isBuying ? currency.buyRate : currency.sellRate;\r\n        }\r\n        return currency.currencyName;\r\n    });\r\n\r\n    const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value;\r\n        if (!isFinite(+value)) return;\r\n        if (e.currentTarget.dataset.currency) {\r\n            const trigger: string = e.currentTarget.dataset.currency;\r\n            if (trigger === 'usd') {\r\n                if (value === '') {\r\n                    dispatch(changeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    dispatch(changeCurrencyFieldAC(value, (+Number(value).toFixed(2) * currencyRate).toFixed(2)))\r\n                }\r\n            } else {\r\n                if (value === '') {\r\n                    dispatch(changeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    dispatch(changeCurrencyFieldAC((+Number(value).toFixed(2) / currencyRate).toFixed(2), value));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n        e.currentTarget.dataset.action === 'buy' ? dispatch(changeActionAC(true)) : dispatch(changeActionAC(false));\r\n    };\r\n\r\n    const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\r\n        e.currentTarget.dataset.currency && dispatch(changeCurrentCurrencyAC(e.currentTarget.dataset.currency));\r\n    };\r\n\r\n    return (\r\n            <CurrencyExchange\r\n                currenciesName={currenciesName}\r\n                currentCurrency={currentCurrency}\r\n                currencyRate={currencyRate}\r\n                isBuying={isBuying}\r\n                amountOfUSD={amountOfUSD}\r\n                amountOfCurrency={amountOfCurrency}\r\n                changeCurrencyField={changeCurrencyField}\r\n                changeAction={changeAction}\r\n                changeCurrentCurrency={changeCurrentCurrency}\r\n            />\r\n    );\r\n};\r\n\r\nexport default CurrencyEContainer\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport CurrencyExchangeContainer from \"./container/CurrencyEContainer\";\r\n\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"container\">\r\n            <CurrencyExchangeContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {ACTIONS_TYPE, CurrencyReducersTypes } from './actions';\r\n\r\n\r\nexport type CurrencyType = {\r\n    currencyName: string;\r\n    buyRate: number;\r\n    sellRate: number;\r\n};\r\nexport type CurrencyState = {\r\n    currencies: Array<CurrencyType>;\r\n    currentCurrency: string;\r\n    isBuying: boolean;\r\n    amountOfUSD: string;\r\n    amountOfCurrency: string;\r\n};\r\n\r\nconst initialState: CurrencyState = {\r\n    currencies: [\r\n        {\r\n            currencyName: 'EUR',\r\n            buyRate: 0.8439,\r\n            sellRate: 0.8639,\r\n        },\r\n        {\r\n            currencyName: 'RUR',\r\n            buyRate: 71.437,\r\n            sellRate: 71.637,\r\n        },\r\n\r\n        {\r\n            currencyName: 'GBR',\r\n            buyRate: 0.7133,\r\n            sellRate: 0.7333,\r\n        },\r\n    ],\r\n    currentCurrency: 'EUR',\r\n    isBuying: true,\r\n    amountOfUSD: '',\r\n    amountOfCurrency: '',\r\n};\r\n\r\nexport const currencyReducer = (state: CurrencyState = initialState, action: CurrencyReducersTypes): CurrencyState => {\r\n    switch (action.type) {\r\n\r\n        case ACTIONS_TYPE.CHANGE_CURRENCY_FIELD: {\r\n            return { ...state, ...action.payload}\r\n        }\r\n        case ACTIONS_TYPE.CHANGE_CHANGE_ACTION:\r\n        case ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY:{\r\n            return { ...state,\r\n                ...action.payload,\r\n                amountOfUSD:'',\r\n                amountOfCurrency:'',\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers, createStore } from 'redux';\r\nimport { currencyReducer } from './currencyReducer';\r\n\r\nconst reducers = combineReducers({\r\n    currency: currencyReducer,\r\n});\r\nexport type GlobalStateType = ReturnType<typeof reducers>;\r\n\r\nexport const store = createStore(reducers);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/state';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}